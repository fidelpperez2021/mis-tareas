Fidelperez2025*

const express = require('express'); // Importamos express para crear el servidor
require('dotenv').config(); // Para leer las variables de entorno
const mongoose = require('mongoose'); // Importamos mongoose para la conexión a MongoDB
const fs = require('fs'); // Para trabajar con el sistema de archivos
const path = require('path'); // Para trabajar con rutas de archivos y directorios

class MongoDBConnection {
    constructor() {
        // Nueva cadena de conexión a la base de datos MongoDB
        this.uri = 'mongodb+srv://fidelperezbedoya:MongoDB202301@mongo202301.tmlw3pl.mongodb.net/Practica_6B';

    }

    async connect() {
        try {
            await mongoose.connect(this.uri, {
  
            });
            console.log('Conexión a la base de datos MongoDB establecida');
        } catch (error) {
            console.error('Error al conectar a la base de datos MongoDB:', error);
            throw error;
        }
    }

    close() {
        try {
            mongoose.disconnect();
            console.log('Conexión a la base de datos MongoDB cerrada correctamente');
        } catch (error) {
            console.error('Error al cerrar la conexión a la base de datos MongoDB:', error);
            throw error;
        }
    }
}



class Server {
    // Inicializamos el servidor
    constructor() {
        this.app = express(); // Inicializamos express
        this.port = process.env.PORT; // Puerto de la aplicación
        this.apiPath = '/api'; // Ruta base para los usuarios
        this.app.use(express.static('public'));  // Directorio público para las páginas
        this.app.use(express.json()); // Lectura y parseo del body en formato JSON

        // Instancia de la conexión a MongoDB
        this.dbConnection = new MongoDBConnection();

        // Conectar a la base de datos MongoDB
        this.dbConnection.connect()
            .catch(error => {
                console.error('Error al conectar a la base de datos MongoDB:', error);
            });

        // Middlewares
        this.middlewares(); // Llamamos al método que contiene los middlewares antes de iniciar las rutas

        // Rutas de la aplicación
        this.routes(); // Llamamos al método que contiene las rutas
    }

    middlewares() {
        // CORS - Permitir que cualquier persona haga peticiones a nuestra API
        this.app.use((req, res, next) => { // Middleware para permitir el acceso a la API
            res.header('Access-Control-Allow-Origin', '*'); // Permite el acceso a todos los dominios
            res.header('Access-Control-Allow-Headers', 'Content-Type, x-token'); // Permite el acceso a los headers
            res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE'); // Permite el acceso a los métodos
            next();
        });
    }

 // En tu método routes() del servidor
routes() {
    // Ruta para obtener los registros de la base de datos
    this.app.get('/api/docentes', async (req, res) => {
        try {
            const docentes = await Docente.find();
            res.json(docentes); // Enviar los registros como respuesta JSON
        } catch (error) {
            console.error('Error al obtener los registros de la base de datos:', error);
            res.status(500).json({ error: 'Error al obtener los registros de la base de datos' });
        }
    });
}


    listen() {
        try {
            this.app.listen(this.port, () => {
                console.log(`-----------------------------------------------------`.red);
                console.log('Servidor corriendo en puerto'.green, this.port.yellow, ` http://localhost:${this.port}` + this.apiPath + '/'); // Mensaje en consola
                // Imprimir lista separada por comas de las rutas
                console.log(`RUTAS (ENDPOINT): `.bold, this.obtenerListaDeRutas().join(', ').green);
                console.log(`-----------------------------------------------------`.red);
            });
        } catch (error) {
            console.log(error);
        }
    }

    obtenerListaDeRutas() {
        // Obtener lista de todos los archivos de la carpeta routes con fs
        const routesPath = path.join(__dirname, '../routes');
        const files = fs.readdirSync(routesPath);
        // Recorrer nombres de archivos, eliminar .routes.js y agregar a un array
        files.forEach((file, index) => {
            files[index] = file.replace('.routes.js', '');
        });
        return files;
    }
}

module.exports = Server;
